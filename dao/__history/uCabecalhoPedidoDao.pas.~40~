unit uCabecalhoPedidoDao;

interface

uses SqlExpr, SimpleDS, Db , Classes, SysUtils, DateUtils,
     StdCtrls, DBClient, Provider, uCabecalhoPedido, FireDAC.Comp.Client, FireDAC.Phys.MySQL;

type

   TCabecalhoPedidoDao = Class
      private
         vConexao: TFDConnection;
      public
         constructor Create(pConexao : TFDConnection);
         procedure CarregaLista(pCampos, pCondicao: String; pClient: TClientDataSet);
         function RetornaCabecalhoPedido(pCondicao: String): TCabecalhoPedido;
         function InserirCabecalhoPedido(pObjeto: TCabecalhoPedido): Boolean;
         function AlterarCabecalhoPedido(pObjeto: TCabecalhoPedido; pCondicao: String): Boolean;
         function RetornaUltimoNumPedido: Integer;
         function DeletarCabecalhoPedido(pCondicao: String): Boolean;
      end;
implementation

uses
   uConexao;

constructor TCabecalhoPedidoDao.Create(pConexao: TFDConnection);
begin
   Self.vConexao := pConexao;
end;

procedure TCabecalhoPedidoDao.CarregaLista(pCampos, pCondicao: String; pClient: TClientDataSet);
var
   xQrySelect: TFDQuery;
   xProvider: TDataSetProvider;
begin
  try
     try
        xProvider := nil;

        xQrySelect := TFDQuery.Create(nil);
        xQrySelect.Connection := vConexao;

        xQrySelect.SQL.Text := 'SELECT '+pCampos+' FROM CABECALHO_PEDIDO' +#13;

        if pCondicao <> '' then
           xQrySelect.SQL.Add(' WHERE '+pCondicao);

        xProvider := TDataSetProvider.Create(nil);
        xProvider.DataSet := xQrySelect;

        if pClient.Active then
        begin
           pClient.EmptyDataSet;
           pClient.Fields.Clear;
           pClient.FieldDefs.Clear;
           pClient.Close;
        end;

        pClient.SetProvider(xProvider);
        pClient.Open;
        pClient.SetProvider(nil);

     finally
        if xQrySelect <> nil then
        begin
           xQrySelect.Close;
           FreeAndNil(xQrySelect);
        end;

        if xProvider <> nil then
           FreeAndNil(xProvider);
     end;
  except
     on E: Exception do
     begin
        raise Exception.Create('Não foi possível retornar os registros da '+
           'tabela CABECALHO_PEDIDO.'+#13+ 'Motivo: '+e.Message);
     end;
  end;
end;

function TCabecalhoPedidoDao.RetornaCabecalhoPedido(pCondicao: String): TCabecalhoPedido;
var
   xQry: TFDQuery;
begin
   try
      try
         Result := nil;
         xQry := nil;

         xQry := TFDQuery.Create(nil);
         xQry.Connection := vConexao;
         xQry.Close;
         xQry.SQL.Text := 'SELECT * FROM CABECALHO_PEDIDO';

         if pCondicao <> '' then
            if Pos('WHERE', UpperCase(pCondicao)) > 0 then
               xQry.SQL.Add(pCondicao)
            else
               xQry.SQL.Add(' WHERE ' + pCondicao);

         xQry.Open;

         if xQry.IsEmpty then
            Exit;

         Result := TCabecalhoPedido.Create;

         Result.NumPedido   := xQry.FieldByName('NumPedido'  ).AsInteger;
         Result.DataEmissao := xQry.FieldByName('DataEmissao').AsDateTime;
         Result.CodCliente  := xQry.FieldByName('CodCliente' ).AsInteger;
         Result.ValorTotal  := xQry.FieldByName('ValorTotal' ).AsFloat;
      finally
         if xQry <> nil then
         begin
            xQry.Close;
            FreeAndNil(xQry);
         end;
      end;
   except
      on E: Exception do
         raise Exception.Create(
            'Não foi possível retornar o registro da tabela CABECALHO_PEDIDO. '+
            E.Message);
   end;
end;

function TCabecalhoPedidoDao.InserirCabecalhoPedido(pObjeto: TCabecalhoPedido): Boolean;
var
   xQry: TFDQuery;
begin
   try
      try
         Result := False;
         xQry := nil;

         xQry := TFDQuery.Create(nil);
         xQry.Connection := vConexao;
         xQry.Close;
         xQry.SQL.Text :=
            ' INSERT INTO CABECALHO_PEDIDO (DATAEMISSAO,    '+
            ' CODCLIENTE, VALORTOTAL) VALUES (:DATAEMISSAO,'+
            ' :CODCLIENTE, :VALORTOTAL)';

         xQry.ParamByName('DATAEMISSAO').AsDateTime := pObjeto.DataEmissao;
         xQry.ParamByName('CODCLIENTE' ).AsInteger  := pObjeto.CodCliente;
         xQry.ParamByName('VALORTOTAL' ).AsFloat    := pObjeto.ValorTotal;
         xQry.ExecSQL;

         Result := True;
      finally
         if xQry <> nil then
         begin
            xQry.Close;
            FreeAndNil(xQry);
         end;
      end;
   except
      on E: Exception do
         raise Exception.Create(
            'Não foi possível inserir o registro na tabela CABECALHO_PEDIDO. '+
            E.Message);
   end;
end;

function TCabecalhoPedidoDao.AlterarCabecalhoPedido(pObjeto: TCabecalhoPedido; pCondicao: String): Boolean;
var
   xQry: TFDQuery;
begin
   try
      try
         Result := False;
         xQry := nil;

         xQry := TFDQuery.Create(nil);
         xQry.Connection := vConexao;
         xQry.Connection.Transaction.StartTransaction;
         xQry.Close;
         xQry.SQL.Text :=
            ' UPDATE CABECALHO_PEDIDO SET '+
            ' DATAEMISSAO = :DATAEMISSAO, '+
            ' CODCLIENTE = :CODCLIENTE,   '+
            ' VALORTOTAL - :VALORTOTAL)   ';

         if pCondicao <> '' then
            if Pos('WHERE', UpperCase(pCondicao)) > 0 then
               xQry.SQL.Add(pCondicao)
            else
               xQry.SQL.Add(' WHERE ' + pCondicao);

         xQry.ParamByName('DATAEMISSAO').AsDateTime := pObjeto.DataEmissao;
         xQry.ParamByName('CODCLIENTE' ).AsInteger  := pObjeto.CodCliente;
         xQry.ParamByName('VALORTOTAL' ).AsFloat    := pObjeto.ValorTotal;
         xQry.ExecSQL;
         xQry.Connection.Transaction.Commit;

         Result := True;
      finally
         if xQry <> nil then
         begin
            xQry.Close;
            FreeAndNil(xQry);
         end;
      end;
   except
      on E: Exception do
      begin
         raise Exception.Create(
            'Não foi possível alterar o registro na tabela CABECALHO_PEDIDO. '+
            E.Message);
         xQry.Connection.Transaction.Rollback;
      end;
   end;
end;

function TCabecalhoPedidoDao.RetornaUltimoNumPedido: Integer;
var
   xQry: TFDQuery;
begin
   try
      try
         Result := 0;
         xQry := nil;

         xQry := TFDQuery.Create(nil);
         xQry.Connection := vConexao;
         xQry.Close;
         xQry.SQL.Text := 'SELECT MAX(NUMPEDIDO) AS NUMPEDIDO FROM CABECALHO_PEDIDO';
         xQry.Open;

         if xQry.IsEmpty then
            Exit;

         Result := xQry.FieldByName('NumPedido').AsInteger;
      finally
         if xQry <> nil then
         begin
            xQry.Close;
            FreeAndNil(xQry);
         end;
      end;
   except
      on E: Exception do
         raise Exception.Create(
            'Não foi possível retornar o registro da tabela CABECALHO_PEDIDO. '+
            E.Message);
   end;
end;

function TCabecalhoPedidoDao.DeletarCabecalhoPedido(pCondicao: String): Boolean;
var
   xQry: TFDQuery;
begin
   try
      try
         Result := False;
         xQry := nil;

         xQry := TFDQuery.Create(nil);
         xQry.Connection := vConexao;
         xQry.Connection.Transaction.StartTransaction;
         xQry.Close;
         xQry.SQL.Text := ' DELETE FROM CABECALHO_PEDIDO ';

         if pCondicao <> '' then
            if Pos('WHERE', UpperCase(pCondicao)) > 0 then
               xQry.SQL.Add(pCondicao)
            else
               xQry.SQL.Add(' WHERE ' + pCondicao);

         xQry.ExecSQL;
         xQry.Connection.Transaction.Commit;

         Result := True;
      finally
         if xQry <> nil then
         begin
            xQry.Close;
            FreeAndNil(xQry);
         end;
      end;
   except
      on E: Exception do
      begin
         raise Exception.Create(
            'Não foi possível deletar o registro na tabela CABECALHO_PEDIDO. '+
            E.Message);
         xQry.Connection.Transaction.Rollback;
      end;
   end;
end;

end.
