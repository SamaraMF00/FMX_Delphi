unit uCabecalhoPedido;

interface

uses SqlExpr, SimpleDS, Db , Classes, SysUtils, DateUtils,
     StdCtrls, DBClient, Provider;

type

   TRelDocCliDao = Class
      private
         vConexao: TSQLConnection;
      public
         constructor Create(pConexao : TSQLConnection);
         procedure CarregaLista(pCampos, pCondicao: String; pClient: TClientDataSet);
         function RetornaCabecalhoPedido(pCondicao: String): TObject;
      end;
implementation

uses
   uConexao;

constructor TRelDocCliDao.Create(pConexao: TSQLConnection);
begin
   Self.vConexao := pConexao;
end;

procedure TRelDocCliDao.CarregaLista(pCampos, pCondicao: String; pClient: TClientDataSet);
var
   xQrySelect: TSQLQuery;
   xProvider: TDataSetProvider;
begin
  try
     try
        xProvider := nil;

        xQrySelect := TSQLQuery.Create(nil);
        xQrySelect.SQLConnection := vConexao;

        xQrySelect.SQL.Text := 'SELECT '+pCampos+' FROM CABECALHO_PEDIDO' +#13;

        if pCondicao <> '' then
           xQrySelect.SQL.Add(' WHERE '+pCondicao);

        xProvider := TDataSetProvider.Create(nil);
        xProvider.DataSet := xQrySelect;

        if pClient.Active then
        begin
           pClient.EmptyDataSet;
           pClient.Fields.Clear;
           pClient.FieldDefs.Clear;
           pClient.Close;
        end;

        pClient.SetProvider(xProvider);
        pClient.Open;
        pClient.SetProvider(nil);
     finally
        if xQrySelect <> nil then
        begin
           xQrySelect.Close;
           FreeAndNil(xQrySelect);
        end;

        if xProvider <> nil then
           FreeAndNil(xProvider);
     end;
  except
     on E: Exception do
     begin
        raise Exception.Create('Não foi possível retornar os registros da '+
           'tabela CABECALHO_PEDIDO.'+#13+ 'Motivo: '+e.Message);
     end;
  end;
end;

function TRelDocCliDao.RetornaCabecalhoPedido(pCondicao: String): TObject;
var
   xQry: TSQLQuery;
begin
   try
      try
         Result := nil;
         xQry := nil;

         xQry := TSQLQuery.Create(nil);
         xQry.SQLConnection := vConexao;
         xQry.Close;
         xQry.SQL.Text := 'SELECT * FROM CABECALHO_PEDIDOS';

         if pCondicao <> '' then
            if Pos('WHERE', UpperCase(pCondicao)) > 0 then
               xQry.SQL.Add(pCondicao)
            else
               xQry.SQL.Add(' WHERE ' + pCondicao);

         xQry.Open;

         if xQry.IsEmpty then
            Exit;

         Result := PreencheObjeto(xQry);
      finally
         if xQry <> nil then
         begin
            xQry.Close;
            FreeAndNil(xQry);
         end;
      end;
   except
      on E: Exception do
         raise Exception.Create(
            'Não foi possível retornar o registro da tabela CABECALHO_PEDIDO. '+
            E.Message);
   end;
end;

function TRelDocCliDao.InserirCabecalhoPedido(pObjeto: TObject): Boolean;
var
   xQry: TSQLQuery;
begin
   Result := False;

   if vEntidade = '' then
      raise Exception.Create('Entidade não definida.');

   try
      try
         xQry := TSQLQuery.Create(Nil);
         xQry.SQLConnection := vConexao;
         xQry.SQL.Text := RetornaQryInsert;

         PreencheParametros(xQry, pObjeto);

         if pReturn <> '' then
         begin
            xQry.Open;
            {$IFDEF CTE}
               TFuncoes.get.PreenchePropriedade(
                  pObjeto, pReturn, xQry.FieldByName(pReturn).Value);
            {$ELSE}
               TFuncoes.PreenchePropriedade(
                  pObjeto, pReturn, xQry.FieldByName(pReturn).Value);
            {$ENDIF}
         end
         else
            xQry.ExecSQL;

         Result := True;
      finally
         if xQry <> nil then
         begin
            xQry.Close;
            FreeAndNil(xQry);
         end;
      end;
   except
      on E: Exception do
         raise Exception.Create(
            'Não foi possível inserir o registro da tabela '+ vEntidade +'. '+
            E.Message);
   end;
end;



end.
